openapi: "3.0.0"
info:
  version: 1.0.0
  title: OpenApi TFG
  license:
    name: MIT
servers:
  - url: http://localhost:8080/v1


paths:
  /project:
    summary: Company projects
    get:
      summary: List all projects
      description: Returns a list of all projects
      operationId: getProjects
      tags:
        - project
      responses:
        '200':
          description: A paged array of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/projects"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    post:
      summary: Adds a new project
      description: Adds a new project
      operationId: addProject
      tags:
        - project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/project"
      responses:
        '201':
          description: A project has been added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /project/{projectcode}:
    get:
      summary: Gets a project by the code
      description: Returns an individual project, identified by a code
      operationId: getProjectByCode
      parameters:
        - name: projectcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a project
      tags:
        - project
      responses:
        '200':
          description: A project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    put:
      summary: Updates the given project
      description: Updates the entirety of a project
      operationId: updateProject
      parameters:
        - name: projectcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a project
      tags:
        - project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/project"
      responses:
        '200':
          description: A project has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    patch:
      summary: Updates some of the information of a project
      description: Updates part of a project
      parameters:
        - name: projectcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a project
      operationId: patchProject
      tags:
        - project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/patchedProject"
      responses:
        '200':
          description: A project has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/project"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      summary: Deletes the given project
      description: Deletes the project
      parameters:
        - name: projectcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a project
      operationId: deleteProject
      tags:
        - project
      responses:
        '200':
          description: A project has been deleted
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /opportunity:
    summary: Company opportunities
    description: Returns a list of all opportunities
    get:
      summary: List all available opportunities
      operationId: getOpportunities
      tags:
        - opportunity
      responses:
        '200':
          description: A paged array of opportunities
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/opportunities"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    post:
      summary: Adds a new opportunity
      description: Adds a new opportunity
      operationId: addOpportunity
      tags:
        - opportunity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/opportunity"
      responses:
        '201':
          description: An opportunity has been added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/opportunity"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /opportunity/{opportunitycode}:
    get:
      summary: Gets an opportunity by the code
      description: Returns an individual opportunity, identified by a code
      operationId: getOpportunityByCode
      parameters:
        - name: opportunitycode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of an opportunity
      tags:
        - opportunity
      responses:
        '200':
          description: An opportunity
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/opportunity"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    put:
      summary: Updates the given opportunity
      description: Updates the entirety of an opportunity
      operationId: updateOpportunity
      parameters:
        - name: opportunitycode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of an opportunity
      tags:
        - opportunity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/opportunity"
      responses:
        '200':
          description: An opportunity has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/opportunity"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    patch:
      summary: Updates some of the information of an opportunity
      description: Updates part of an opportunity
      parameters:
        - name: opportunitycode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of an opportunity
      operationId: patchOpportunity
      tags:
        - opportunity
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/patchedOpportunity"
      responses:
        '200':
          description: An opportunity has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/opportunity"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      summary: Deletes the given opportunity
      description: Deletes the opportunity
      parameters:
        - name: opportunitycode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of an opportunity
      operationId: deleteOpportunity
      tags:
        - opportunity
      responses:
        '200':
          description: An opportunity has been deleted
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /people:
    summary: Company people
    description: Returns a list of all people in the company
    get:
      summary: List all available people
      operationId: getPeople
      tags:
        - people
      responses:
        '200':
          description: A paged array of people
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/peopleList"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    post:
      summary: Adds a new person
      description: Adds a new person
      operationId: addPerson
      tags:
        - people
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/people"
      responses:
        '201':
          description: A person has been added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/people"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /people/{personcode}:
    get:
      summary: Gets a person by the code
      description: Returns an individual person, identified by a code
      operationId: getPersonByCode
      parameters:
        - name: personcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a person
      tags:
        - people
      responses:
        '200':
          description: A person
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/people"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    put:
      summary: Updates the given person
      description: Updates the entirety of a person
      operationId: updatePerson
      parameters:
        - name: personcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a person
      tags:
        - people
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/people"
      responses:
        '200':
          description: A person has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/people"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    patch:
      summary: Updates some of the information of a person
      description: Updates part of a person
      parameters:
        - name: personcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a person
      operationId: patchPerson
      tags:
        - people
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/patchedPeople"
      responses:
        '200':
          description: A person has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/people"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      summary: Deletes the given person
      description: Deletes a person
      parameters:
        - name: personcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a person
      operationId: deletePerson
      tags:
        - people
      responses:
        '200':
          description: A person has been deleted
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /skills:
    summary: Skills on the skill tree
    description: Returns a list of all skills
    get:
      summary: List all available skills
      operationId: getSKills
      tags:
        - skills
      responses:
        '200':
          description: A paged array of skills
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/skill"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /skills/{skillcode}:
    get:
      summary: Gets a skill by the code as well as the skills under it
      description: Returns an individual skill as well as the skills under it, identified by a code
      operationId: getSkillByCode
      parameters:
        - name: skillcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a skill
      tags:
        - skills
      responses:
        '200':
          description: A skill
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/skill"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /candidate:
    summary: Candidates
    description: Returns a list of all the company candidates
    get:
      summary: List all candidates
      operationId: getCandidates
      tags:
        - candidate
      responses:
        '200':
          description: A paged array of candidates
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/candidate"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    post:
      summary: Adds a new candidate
      description: Adds a new candidate
      operationId: addCandidate
      tags:
        - candidate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/candidate"
      responses:
        '201':
          description: A candidate has been added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/candidate"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /candidate/{candidatecode}:
    get:
      summary: Gets a candidate by the code
      description: Returns an individual candidate, identified by a code
      operationId: getCandidateByCode
      parameters:
        - name: candidatecode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a candidate
      tags:
        - candidate
      responses:
        '200':
          description: A candidate
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/candidate"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    put:
      summary: Updates the given candidate
      description: Updates the entirety of a candidate
      operationId: updateCandidate
      parameters:
        - name: candidatecode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a candidate
      tags:
        - candidate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/candidate"
      responses:
        '200':
          description: A candidate has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/candidate"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    patch:
      summary: Updates some of the information of a candidate
      description: Updates part of a candidate
      parameters:
        - name: candidatecode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a candidate
      operationId: patchCandidate
      tags:
        - candidate
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/patchedCandidate"
      responses:
        '200':
          description: A candidate has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/candidate"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      summary: Deletes the given candidate
      description: Deletes a candidate
      parameters:
        - name: candidatecode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a candidate
      operationId: deleteCandidate
      tags:
        - candidate
      responses:
        '200':
          description: A candidate has been deleted
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /client:
    summary: Clients
    description: Returns a list of all the company clients
    get:
      summary: List all clients
      operationId: getClients
      tags:
        - client
      responses:
        '200':
          description: A paged array of clients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/clients"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    post:
      summary: Adds a new client
      description: Adds a new client
      operationId: addClient
      tags:
        - client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/client"
      responses:
        '200':
          description: A client has been added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/client"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /client/{clientcode}:
    get:
      summary: Gets a client by the code
      description: Returns an individual client, identified by a code
      operationId: getClientByCode
      parameters:
        - name: clientcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a client
      tags:
        - client
      responses:
        '200':
          description: A client
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/client"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    put:
      summary: Updates the given client
      description: Updates the entirety of a client
      operationId: updateClient
      parameters:
        - name: clientcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a client
      tags:
        - client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/client"
      responses:
        '200':
          description: A client has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/client"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    patch:
      summary: Updates some of the information of a client
      description: Updates part of a client
      parameters:
        - name: clientcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a client
      operationId: patchClient
      tags:
        - client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/patchedClient"
      responses:
        '200':
          description: A client has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/client"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      summary: Deletes the given client
      description: Deletes a client
      parameters:
        - name: clientcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a client
      operationId: deleteClient
      tags:
        - client
      responses:
        '200':
          description: A client has been deleted
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /team:
    summary: Teams
    description: Returns a list of all the company teams
    get:
      summary: List all teams
      operationId: getTeams
      tags:
        - team
      responses:
        '200':
          description: A paged array of teams
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/teams"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    post:
      summary: Adds a new team
      description: Adds a new team
      operationId: addTeam
      tags:
        - team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team"
      responses:
        '200':
          description: A team has been added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

  /team/{teamcode}:
    get:
      summary: Gets a team by the code
      description: Returns an individual team, identified by a code
      operationId: getTeamByCode
      parameters:
        - name: teamcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a team
      tags:
        - team
      responses:
        '200':
          description: A team
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    put:
      summary: Updates the given team
      description: Updates the entirety of a team
      operationId: updateTeam
      parameters:
        - name: teamcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a team
      tags:
        - client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/team"
      responses:
        '200':
          description: A team has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    patch:
      summary: Updates some of the information of a team
      description: Updates part of a team
      parameters:
        - name: teamcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a team
      operationId: patchTeam
      tags:
        - team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/patchedTeam"
      responses:
        '200':
          description: A team has been updated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/team"
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

    delete:
      summary: Deletes the given team
      description: Deletes a team
      parameters:
        - name: teamcode
          in: path
          required: true
          schema:
            type: string
          description: String that represents the code of a team
      operationId: deleteTeam
      tags:
        - team
      responses:
        '200':
          description: A team has been deleted
        '400':
          description: Bad Request
        '404':
          description: Not Found
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/error"

components:
  schemas:
    projects:
      type: array
      items:
        $ref: "#/components/schemas/project"

    project:
      type: object
      required:
        - code
        - tag
        - name
        - desc
        - initDate
        - endDate
        - clientCode
        - area
        - domain
        - duration
        - guards
        - techArray
        - roles
      properties:
        code:
          type: string
        tag:
          type: string
        name:
          type: string
        desc:
          type: string
        initDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        clientCode:
          type: string
        area:
          type: string
        domain:
          type: string
        duration:
          type: string
        guards:
          $ref: "#/components/schemas/guards"
        skills:
          type: array
          items:
            type: string
        roles:
          type: array
          items:
            $ref: "#/components/schemas/roles"

    patchedProject:
      type: object
      properties:
        tag:
          type: string
        name:
          type: string
        desc:
          type: string
        guards:
          $ref: "#/components/schemas/guards"
        skills:
          type: array
          items:
            type: string
        roles:
            type: array
            items:
              $ref: "#/components/schemas/roles"

    guards:
      type: string
      enum:
        - PASSIVE
        - ACTIVE
        - NO_GUARD

    roles:
      type: object
      required:
        - rol
        - number
      properties:
        rol:
          type: string
        number:
          type: integer

    skill:
      type: object
      required:
        - code
        - type
        - subSkills
      properties:
        code:
          type: string
        name:
          type: string
        subSkills:
          type: array
          items:
            $ref: "#/components/schemas/skill"

    opportunities:
      type: array
      items:
        $ref: "#/components/schemas/opportunity"

    opportunity:
      type: object
      required:
        - code
        - name
        - projectCode
        - clientCode
        - openingDate
        - closingDate
        - priority
        - mode
        - office
        - role
        - skills
      properties:
        code:
          type: string
        name:
          type: string
        projectCode:
          type: string
        clientCode:
          type: string
        openingDate:
          type: string
          format: date
        closingDate:
          type: string
          format: date
        priority:
          type: string
        mode:
          $ref: "#/components/schemas/mode"
        office:
          type: string
        role:
          type: string
        skills:
          type: array
          items:
            $ref: "#/components/schemas/opportunitySkill"
        managedBy:
          type: string

    patchedOpportunity:
      type: object
      properties:
        name:
          type: string
        projectCode:
          type: string
        clientCode:
          type: string
        priority:
          type: string
        openingDate:
          type: string
          format: date
        closingDate:
          type: string
          format: date
        mode:
          $ref: "#/components/schemas/mode"
        office:
          type: string
        role:
          type: string
        skills:
          type: array
          items:
            $ref: "#/components/schemas/opportunitySkill"
        managedBy:
          type: string

    mode:
      type: string
      enum:
        - REMOTE
        - PRESENTIAL
        - MIX

    clients:
      type: array
      items:
        $ref: "#/components/schemas/client"

    client:
      type: object
      required:
        - code
        - name
        - industry
        - country
      properties:
        code:
          type: string
        name:
          type: string
        industry:
          type: string
        country:
          type: string
        principalOffice:
          type: string
        HQ:
          type: string
        offices:
          type: array
          items:
            $ref: "#/components/schemas/office"

    patchedClient:
      type: object
      properties:
        name:
          type: string
        industry:
          type: string
        country:
          type: string
        principalOffice:
          type: string
        offices:
          type: array
          items:
            $ref: "#/components/schemas/office"

    office:
      type: object
      required:
        - code
        - name
        - address
        - phone
        - geolocation
      properties:
        code:
          type: string
        name:
          type: string
        address:
          type: string
        phone:
          type: string
        geolocation:
          type: string

    candidates:
      type: array
      items:
        $ref: "#/components/schemas/candidate"

    candidate:
      type: object
      required:
        - code
        - candidateCode
        - opportunityCode
        - skills
      properties:
        code:
          type: string
        introductionDate:
          type: string
          format: date
        resolutionDate:
          type: string
          format: date
        status:
          type: string
          enum: [INTERVIEWED, PRESENTED, OK, KO]
        candidateCode:
          type: string
        opportunityCode:
          type: string
        skills:
          type: array
          items:
            $ref: "#/components/schemas/candidateSkill"

    patchedCandidate:
      type: object
      properties:
        skills:
          type: array
          items:
            $ref: "#/components/schemas/candidateSkill"

    candidateSkill:
      type: object
      required:
      - code
      - level
      - experience
      properties:
        code:
          type: string
        level:
          type: string
          enum:
          - HIGH
          - MEDIUM
          - CONFIDENT
          - LOW
        experience:
          type: integer
          format: int32

    opportunitySkill:
      type: object
      required:
        - skill
        - levelReq
        - minLevel
        - minExp
      properties:
        skill:
          type: string
        levelReq:
          type: string
          enum:
            - MANDATORY
            - NICE_TO_HAVE
        minLevel:
          type: string
          enum:
            - HIGH
            - MEDIUM
            - LOW
        minExp:
          type: integer
          format: int32

    peopleList:
      type: array
      items:
          $ref: "#/components/schemas/people"

    people:
      type: object
      required:
        - code
        - employeeId
        - name
        - surname
      properties:
        code:
          type: string
        employeeId:
          type: string
        name:
          type: string
        surname:
          type: string
        birthDate:
          type: string
          format: date
        title:
          $ref: "#/components/schemas/title"
        roles:
          type: array
          items:
            type: object
            properties:
              role:
                type: string
              category:
                type: string
              initDate:
                type: string
                format: date
        knows:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              level:
                type: string
              primary:
                type: boolean
              avoidable:
                type: boolean
        work_with:
          type: array
          items: 
            type: string
        master:
          type: array
          items: 
            type: string
        participate:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              roles:
                type: array
                items:
                  $ref: "#/components/schemas/role"
        interest:
          type: array
          items:
            type: string
        certificates:
          type: array
          items:
            $ref: "#/components/schemas/certificate"

    patchedPeople:
      type: object
      properties:
        employeeId:
          type: string
        name:
          type: string
        surname:
          type: string
        birthDate:
          type: string
          format: date
        title:
          $ref: "#/components/schemas/title"
        knows:
          type: array
          items:
            type: object
            properties:
              code:
                type: string
              level:
                type: string
              primary:
                type: boolean
              avoidable:
                type: boolean
        work_with:
          type: array
          items:
            type: string
        master:
          type: array
          items:
            type: string
        participate:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
              roles:
                type: array
                items:
                  $ref: "#/components/schemas/role"
        interest:
          type: array
          items:
            type: string
        certificates:
          type: array
          items:
            $ref: "#/components/schemas/certificate"

    certificate:
      type: object
      properties:
        code:
          type: string
        comments:
          type: string
        date:
          type: string
          format: date

    title:
      type: string
      enum:
        - PRINCIPAL
        - HEAD
        - DIRECTOR
        - EXPERT
        - SENIOR
        - DEVELOPER
        - JUNIOR

    role:
      type: object
      required:
        - role
        - initDate
        - endDate
      properties:
        role:
          type: string
        initDate:
          type: string
          format: date
        endDate:
          type: string
          format: date

    teams:
      type: array
      items:
        $ref: "#/components/schemas/team"

    team:
      type: object
      required:
        - code
        - name
        - description
        - tags
        - members
      properties:
        code:
          type: string
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        members:
          type: array
          items:
            type: object
            properties:
              peopleCode:
                type: string
              position:
                type: string
                enum:
                  - DIRECTOR
                  - HEAD

    patchedTeam:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tags:
          type: array
          items:
            type: string
        members:
          type: array
          items:
            type: object
            properties:
              peopleCode:
                type: string
              position:
                type: string
                enum:
                  - DIRECTOR
                  - HEAD

    error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string